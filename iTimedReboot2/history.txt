iTimedReboot2

============================================
[HKEY_LOCAL_MACHINE\Software\Intermec\iTimedReboot2]
"newTime"="00:34"							//reboot time including a random part
"LastBootDate"="20131112"					//date of last reboot (yyyymmdd)
"RebootExtParms"="\\Flash File Store"		//args for external reboot app
"RebootExtApp"="\\Windows\\fexplore.exe"	//external reboot app
"RebootExt"="0"								//external reboot app enable/disable
"RebootDays"="0"							//days between reboots
"EnableLogging"="1"							//0=disable logging file, 1=enable
"PingTarget"="127.0.0.1"					//target IP to ping
"PingInterval"="60"							//0=OFF, seconds between pings
"RebootTime"="00:00"						//time to reboot in hh:mm
"Interval"="30"								//0=OFF, seconds between time checks, do not use >30000
============================================

  v0.61:
		changed some logging messages
		changed code:
				// !!!! dont do that: g_stRebootDateTime=g_stLastBootDateTime;
				//we need the date and time of when to reboot
				g_stRebootDateTime=addDays(g_stLastBootDateTime, g_iRebootDays);
		calculation is done against g_stRebootDateTime, which is the time to reboot, and current time
		if there is a change, g_stLastBootDateTime will be updated and so g_stRebootDateTime needs to be updated
		
  v0.6:
		Moved "+++ next reboot calculated for" in TimedReboot() after global update
		Moved "+++ next reboot calculated for" in extraLogging/Testing block (occurs only after x cycles)
		extraLogging interval changed from 20 to 40 (x 30 seconds)
		added
				nclog_LogginEnabled=TRUE;
				nclog(L"%s started\n", szApplicationNameAndVersion);
		add beginning of WinMain to have a minmal logging all the time and to see app verion in log

  v0.5:
		added some more logging /see g_extraLogging...
		moved g_stRebootDateTime update from TimeReboot() to WriteLastBootDate()
		added szApplicationNameAndVersion to text in window to show version number
		changed TimeReboot if/else chain
		added one timer call at start of app (so we do not have to wait 30 seconds before first calculation)
		
  v0.4:
		in int TimedReboot(void)
		...
			wsprintf(g_LastBootDate, L"%04i%02i%02i", g_stLastBootDateTime.wYear, g_stLastBootDateTime.wMonth, g_stLastBootDateTime.wDay);
		//	g_stRebootDateTime holds time as read by registry
			//	+ needs to be updated as used for diff calculating, if there is no reboot (which would read the reg with new value)
			g_stRebootDateTime=g_stLastBootDateTime;
			writeLastBootDate(g_stLastBootDateTime);
		release r83
      
	v0.3:
		TODO: add day param to enable 24h, 48h, 7 days intervals
			DONE
			added new regsitry entry and changed TimedReboot to look for days too
		TODO: add randomize function within given time frame
			DONE
			the random part will be added when the tool starts
			the next boot will be displayed on screen
	v0.2:
		added a resource string for WindowClassName as other app TaskbarAddon4 relies on the Class Name
		changed 
			LoadString(hInstance, IDC_iTimedReboot2, szWindowClass, MAX_LOADSTRING); 
		to
			LoadString(hInstance, IDS_WINDOWCLASSNAME, szWindowClass, MAX_LOADSTRING);
	v0.1:
		initial release with functional changes based on iTimedReboot
			